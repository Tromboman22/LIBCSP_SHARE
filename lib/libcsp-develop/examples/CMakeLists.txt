if(CSP_POSIX)

  add_library(csp_posix_helper OBJECT ${CSP_SAMPLES_EXCLUDE} csp_posix_helper.c)
  add_executable(csp_arch ${CSP_SAMPLES_EXCLUDE} csp_arch.c)
  add_executable(csp_server_client ${CSP_SAMPLES_EXCLUDE} csp_server_client.c)
  add_executable(csp_server ${CSP_SAMPLES_EXCLUDE} csp_server.c)
  add_executable(csp_client ${CSP_SAMPLES_EXCLUDE} csp_client.c)
  add_executable(csp_bridge_can2udp ${CSP_SAMPLES_EXCLUDE} csp_bridge_can2udp.c)
  add_executable(zmqproxy ${CSP_SAMPLES_EXCLUDE} zmqproxy.c)

  target_include_directories(csp_posix_helper PRIVATE ${csp_inc})
  target_include_directories(csp_arch PRIVATE ${csp_inc})
  target_include_directories(csp_server_client PRIVATE ${csp_inc})
  target_include_directories(csp_server PRIVATE ${csp_inc})
  target_include_directories(csp_client PRIVATE ${csp_inc})
  target_include_directories(zmqproxy PRIVATE ${csp_inc} ${LIBZMQ_INCLUDE_DIRS})

  target_link_libraries(csp_posix_helper PRIVATE csp_common)
  target_link_libraries(csp_arch PRIVATE csp csp_common)
  target_link_libraries(csp_server_client PRIVATE csp csp_common csp_posix_helper Threads::Threads)
  target_link_libraries(csp_server PRIVATE csp csp_common csp_posix_helper Threads::Threads)
  target_link_libraries(csp_client PRIVATE csp csp_common csp_posix_helper Threads::Threads)
  target_link_libraries(csp_bridge_can2udp PRIVATE csp csp_common)
  target_link_libraries(zmqproxy PRIVATE csp csp_common Threads::Threads ${LIBZMQ_LIBRARIES})
endif()
